{
  "lockFileVersion": 3,
  "moduleFileHash": "1b368dcec213347d4fed96df912732342c9b8a14e7955923cfecf2686861d720",
  "flags": {
    "cmdRegistries": [
      "https://bcr.bazel.build/"
    ],
    "cmdModuleOverrides": {},
    "allowedYankedVersions": [],
    "envVarAllowedYankedVersions": "",
    "ignoreDevDependency": false,
    "directDependenciesMode": "WARNING",
    "compatibilityMode": "ERROR"
  },
  "localOverrideHashes": {
    "bazel_tools": "922ea6752dc9105de5af957f7a99a6933c0a6a712d23df6aad16a9c399f7e787"
  },
  "moduleDepGraph": {
    "<root>": {
      "name": "",
      "version": "",
      "key": "<root>",
      "repoName": "",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "com_github_tink_crypto_tink_cc": "tink_cc@2.1.3",
        "rules_cc": "rules_cc@0.1.0",
        "rules_proto": "rules_proto@7.0.2",
        "com_google_protobuf": "protobuf@27.3",
        "com_github_google_googletest": "googletest@1.15.2",
        "com_google_absl": "abseil-cpp@20240116.2",
        "boringssl": "boringssl@0.20241209.0",
        "com_github_google_glog": "glog@0.5.0",
        "rules_license": "rules_license@1.0.0",
        "com_github_google_highway": "highway@1.2.0",
        "rules_python": "rules_python@0.33.2",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      }
    },
    "tink_cc@2.1.3": {
      "name": "tink_cc",
      "version": "2.1.3",
      "key": "tink_cc@2.1.3",
      "repoName": "tink_cc",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@tink_cc//:extensions.bzl",
          "extensionName": "wycheproof_extension",
          "usingModule": "tink_cc@2.1.3",
          "location": {
            "file": "https://bcr.bazel.build/modules/tink_cc/2.1.3/MODULE.bazel",
            "line": 31,
            "column": 37
          },
          "imports": {
            "wycheproof": "wycheproof"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "rules_cc": "rules_cc@0.1.0",
        "rules_proto": "rules_proto@7.0.2",
        "platforms": "platforms@0.0.10",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "com_google_googletest": "googletest@1.15.2",
        "com_google_protobuf": "protobuf@27.3",
        "boringssl": "boringssl@0.20241209.0",
        "rapidjson": "rapidjson@1.1.0",
        "com_google_absl": "abseil-cpp@20240116.2",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "tink_cc~2.1.3",
          "urls": [
            "https://github.com/tink-crypto/tink-cc/releases/download/v2.1.3/tink-cc-2.1.3.zip"
          ],
          "integrity": "sha256-FKP2SlbX6Sloidfrp6O4eHwygeW8V5EDPFS6+BCgtu8=",
          "strip_prefix": "tink-cc-2.1.3",
          "remote_patches": {},
          "remote_patch_strip": 1
        }
      }
    },
    "rules_cc@0.1.0": {
      "name": "rules_cc",
      "version": "0.1.0",
      "key": "rules_cc@0.1.0",
      "repoName": "rules_cc",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_cc_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_cc//cc:extensions.bzl",
          "extensionName": "cc_configure_extension",
          "usingModule": "rules_cc@0.1.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_cc/0.1.0/MODULE.bazel",
            "line": 11,
            "column": 29
          },
          "imports": {
            "local_config_cc": "local_config_cc",
            "local_config_cc_toolchains": "local_config_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.19.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.10",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_cc~0.1.0",
          "urls": [
            "https://github.com/bazelbuild/rules_cc/releases/download/0.1.0/rules_cc-0.1.0.tar.gz"
          ],
          "integrity": "sha256-SxIUmgQd37gwao/Q6QTjnWc1Us6C5ClulvrJy/B4Dlk=",
          "strip_prefix": "rules_cc-0.1.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_cc/0.1.0/patches/module_dot_bazel_version.patch": "sha256-2pIvoTgk0ChEhJ6GELGNoN9PGRna9nMz49fzt7+d7mg="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_proto@7.0.2": {
      "name": "rules_proto",
      "version": "7.0.2",
      "key": "rules_proto@7.0.2",
      "repoName": "rules_proto",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "com_google_protobuf": "protobuf@27.3",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_cc": "rules_cc@0.1.0",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_proto~7.0.2",
          "urls": [
            "https://github.com/bazelbuild/rules_proto/releases/download/7.0.2/rules_proto-7.0.2.tar.gz"
          ],
          "integrity": "sha256-DlxkolmabibGoD1hYiQtIx7MDeIZU0w4y0QCFx3vIeg=",
          "strip_prefix": "rules_proto-7.0.2",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_proto/7.0.2/patches/module_dot_bazel_version.patch": "sha256-kxckjuQWVpV7S42vfiX3heOtrOWXlhW/tAfaQFbgNjA="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "protobuf@27.3": {
      "name": "protobuf",
      "version": "27.3",
      "key": "protobuf@27.3",
      "repoName": "com_google_protobuf",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "com_google_absl": "abseil-cpp@20240116.2",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "jsoncpp": "jsoncpp@1.9.5",
        "rules_cc": "rules_cc@0.1.0",
        "rules_java": "rules_java@7.1.0",
        "rules_jvm_external": "rules_jvm_external@5.1",
        "rules_pkg": "rules_pkg@0.7.0",
        "rules_python": "rules_python@0.33.2",
        "platforms": "platforms@0.0.10",
        "zlib": "zlib@1.3",
        "rules_proto": "rules_proto@7.0.2",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "protobuf~27.3",
          "urls": [
            "https://github.com/protocolbuffers/protobuf/releases/download/v27.3/protobuf-27.3.zip"
          ],
          "integrity": "sha256-pJFHIX9p6NGaqwzFwAWdYgEmH1y2IUX4q0rIuU5/+oY=",
          "strip_prefix": "protobuf-27.3",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "googletest@1.15.2": {
      "name": "googletest",
      "version": "1.15.2",
      "key": "googletest@1.15.2",
      "repoName": "googletest",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "//:MODULE.bazel",
          "extensionName": "_repo_rules",
          "usingModule": "googletest@1.15.2",
          "location": {
            "file": "https://bcr.bazel.build/modules/googletest/1.15.2/MODULE.bazel",
            "line": 0,
            "column": 0
          },
          "imports": {
            "fuchsia_sdk": "fuchsia_sdk"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "//:fake_fuchsia_sdk.bzl%fake_fuchsia_sdk",
              "attributeValues": {
                "name": "fuchsia_sdk"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/googletest/1.15.2/MODULE.bazel",
                "line": 69,
                "column": 17
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "com_google_absl": "abseil-cpp@20240116.2",
        "platforms": "platforms@0.0.10",
        "com_googlesource_code_re2": "re2@2024-07-02",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "googletest~1.15.2",
          "urls": [
            "https://github.com/google/googletest/releases/download/v1.15.2/googletest-1.15.2.tar.gz"
          ],
          "integrity": "sha256-e0K01u1IgQxTYsJloX+uvpDcI3PIheUhZDnTeSfwKSY=",
          "strip_prefix": "googletest-1.15.2",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "abseil-cpp@20240116.2": {
      "name": "abseil-cpp",
      "version": "20240116.2",
      "key": "abseil-cpp@20240116.2",
      "repoName": "abseil-cpp",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "com_google_googletest": "googletest@1.15.2",
        "platforms": "platforms@0.0.10",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "abseil-cpp~20240116.2",
          "urls": [
            "https://github.com/abseil/abseil-cpp/releases/download/20240116.2/abseil-cpp-20240116.2.tar.gz"
          ],
          "integrity": "sha256-czcmuMOm05pBINfkXqi0GkNM2s3kAculAPFCNsSbOdw=",
          "strip_prefix": "abseil-cpp-20240116.2",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "boringssl@0.20241209.0": {
      "name": "boringssl",
      "version": "0.20241209.0",
      "key": "boringssl@0.20241209.0",
      "repoName": "boringssl",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "googletest": "googletest@1.15.2",
        "platforms": "platforms@0.0.10",
        "rules_cc": "rules_cc@0.1.0",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "boringssl~0.20241209.0",
          "urls": [
            "https://github.com/google/boringssl/releases/download/0.20241209.0/boringssl-0.20241209.0.tar.gz"
          ],
          "integrity": "sha256-JDpPv6TnSf7Mc+WPYvJasuQe3MTzT6I7S2r+Dgursq0=",
          "strip_prefix": "boringssl-0.20241209.0/",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "glog@0.5.0": {
      "name": "glog",
      "version": "0.5.0",
      "key": "glog@0.5.0",
      "repoName": "glog",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "com_github_gflags_gflags": "gflags@2.2.2",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "glog~0.5.0",
          "urls": [
            "https://github.com/google/glog/archive/refs/tags/v0.5.0.tar.gz"
          ],
          "integrity": "sha256-7t5x8oNxvzmqabRd4jsynTchQBbiBVJps7Xnz9QLWfU=",
          "strip_prefix": "glog-0.5.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/glog/0.5.0/patches/remove_only_the_first_leading_at.patch": "sha256-ieceuBwB5MiGzs1ES3FKKLTCuHwxxERo2clZn5h8S3g=",
            "https://bcr.bazel.build/modules/glog/0.5.0/patches/module_dot_bazel.patch": "sha256-MRfd07vZhtuP1CiKn4zLeP2kRCgt1pZgMkt52mBect4="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_license@1.0.0": {
      "name": "rules_license",
      "version": "1.0.0",
      "key": "rules_license@1.0.0",
      "repoName": "rules_license",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_license~1.0.0",
          "urls": [
            "https://github.com/bazelbuild/rules_license/releases/download/1.0.0/rules_license-1.0.0.tar.gz"
          ],
          "integrity": "sha256-JtQCH2iY4juC75UweDid1JrCtWGKxWSt5O+HzO0Uezg=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "highway@1.2.0": {
      "name": "highway",
      "version": "1.2.0",
      "key": "highway@1.2.0",
      "repoName": "highway",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "com_google_googletest": "googletest@1.15.2",
        "rules_cc": "rules_cc@0.1.0",
        "rules_license": "rules_license@1.0.0",
        "platforms": "platforms@0.0.10",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "highway~1.2.0",
          "urls": [
            "https://github.com/google/highway/releases/download/1.2.0/highway-1.2.0.tar.gz"
          ],
          "integrity": "sha256-WOnV1B1lc60VJFrXauxTppSZynSAwJLYmcRCSBLtkG8=",
          "strip_prefix": "highway-1.2.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/highway/1.2.0/patches/module_dot_bazel.patch": "sha256-SjQSq0ej3+qp7isEnu7Aa8KlUSJyJBn6F0IaBgl9e5E="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "rules_python@0.33.2": {
      "name": "rules_python",
      "version": "0.33.2",
      "key": "rules_python@0.33.2",
      "repoName": "rules_python",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@pythons_hub//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_python//python/private/bzlmod:internal_deps.bzl",
          "extensionName": "internal_deps",
          "usingModule": "rules_python@0.33.2",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_python/0.33.2/MODULE.bazel",
            "line": 16,
            "column": 30
          },
          "imports": {
            "rules_python_internal": "rules_python_internal",
            "pypi__build": "pypi__build",
            "pypi__click": "pypi__click",
            "pypi__colorama": "pypi__colorama",
            "pypi__importlib_metadata": "pypi__importlib_metadata",
            "pypi__installer": "pypi__installer",
            "pypi__more_itertools": "pypi__more_itertools",
            "pypi__packaging": "pypi__packaging",
            "pypi__pep517": "pypi__pep517",
            "pypi__pip": "pypi__pip",
            "pypi__pip_tools": "pypi__pip_tools",
            "pypi__pyproject_hooks": "pypi__pyproject_hooks",
            "pypi__setuptools": "pypi__setuptools",
            "pypi__tomli": "pypi__tomli",
            "pypi__wheel": "pypi__wheel",
            "pypi__zipp": "pypi__zipp"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_python//python/extensions:python.bzl",
          "extensionName": "python",
          "usingModule": "rules_python@0.33.2",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_python/0.33.2/MODULE.bazel",
            "line": 41,
            "column": 23
          },
          "imports": {
            "python_3_11": "python_3_11",
            "python_versions": "python_versions",
            "pythons_hub": "pythons_hub"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "toolchain",
              "attributeValues": {
                "is_default": true,
                "python_version": "3.11"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_python/0.33.2/MODULE.bazel",
                "line": 47,
                "column": 17
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_python//python/private/bzlmod:pip.bzl",
          "extensionName": "pip_internal",
          "usingModule": "rules_python@0.33.2",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_python/0.33.2/MODULE.bazel",
            "line": 59,
            "column": 20
          },
          "imports": {
            "rules_python_publish_deps": "rules_python_publish_deps"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "parse",
              "attributeValues": {
                "hub_name": "rules_python_publish_deps",
                "python_version": "3.11",
                "requirements_by_platform": {
                  "//tools/publish:requirements.txt": "linux_*",
                  "//tools/publish:requirements_darwin.txt": "osx_*",
                  "//tools/publish:requirements_windows.txt": "windows_*"
                }
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_python/0.33.2/MODULE.bazel",
                "line": 60,
                "column": 10
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.19.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_cc": "rules_cc@0.1.0",
        "platforms": "platforms@0.0.10",
        "rules_proto": "rules_proto@7.0.2",
        "com_google_protobuf": "protobuf@27.3",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_python~0.33.2",
          "urls": [
            "https://github.com/bazelbuild/rules_python/releases/download/0.33.2/rules_python-0.33.2.tar.gz"
          ],
          "integrity": "sha256-4/HMegTZsJY1r7MTBzHtgrX1jq3IIz1O+1mUTZL/wG8=",
          "strip_prefix": "rules_python-0.33.2",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_python/0.33.2/patches/module_dot_bazel_version.patch": "sha256-wokeU3ERM8RdlVsrp+N1uJwaaoRyKbE1Q3JqP3ChJjQ="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "bazel_tools@_": {
      "name": "bazel_tools",
      "version": "",
      "key": "bazel_tools@_",
      "repoName": "bazel_tools",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_cc_toolchains//:all",
        "@local_config_sh//:local_sh_toolchain"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_tools//tools/cpp:cc_configure.bzl",
          "extensionName": "cc_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 17,
            "column": 29
          },
          "imports": {
            "local_config_cc": "local_config_cc",
            "local_config_cc_toolchains": "local_config_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/osx:xcode_configure.bzl",
          "extensionName": "xcode_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 21,
            "column": 32
          },
          "imports": {
            "local_config_xcode": "local_config_xcode"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_java//java:extensions.bzl",
          "extensionName": "toolchains",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 24,
            "column": 32
          },
          "imports": {
            "local_jdk": "local_jdk",
            "remote_java_tools": "remote_java_tools",
            "remote_java_tools_linux": "remote_java_tools_linux",
            "remote_java_tools_windows": "remote_java_tools_windows",
            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/sh:sh_configure.bzl",
          "extensionName": "sh_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 35,
            "column": 39
          },
          "imports": {
            "local_config_sh": "local_config_sh"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/test:extensions.bzl",
          "extensionName": "remote_coverage_tools_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 39,
            "column": 48
          },
          "imports": {
            "remote_coverage_tools": "remote_coverage_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/android:android_extensions.bzl",
          "extensionName": "remote_android_tools_extensions",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 42,
            "column": 42
          },
          "imports": {
            "android_gmaven_r8": "android_gmaven_r8",
            "android_tools": "android_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "rules_cc": "rules_cc@0.1.0",
        "rules_java": "rules_java@7.1.0",
        "rules_license": "rules_license@1.0.0",
        "rules_proto": "rules_proto@7.0.2",
        "rules_python": "rules_python@0.33.2",
        "platforms": "platforms@0.0.10",
        "com_google_protobuf": "protobuf@27.3",
        "zlib": "zlib@1.3",
        "build_bazel_apple_support": "apple_support@1.15.1",
        "local_config_platform": "local_config_platform@_"
      }
    },
    "local_config_platform@_": {
      "name": "local_config_platform",
      "version": "",
      "key": "local_config_platform@_",
      "repoName": "local_config_platform",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.10",
        "bazel_tools": "bazel_tools@_"
      }
    },
    "platforms@0.0.10": {
      "name": "platforms",
      "version": "0.0.10",
      "key": "platforms@0.0.10",
      "repoName": "platforms",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@platforms//host:extension.bzl",
          "extensionName": "host_platform",
          "usingModule": "platforms@0.0.10",
          "location": {
            "file": "https://bcr.bazel.build/modules/platforms/0.0.10/MODULE.bazel",
            "line": 9,
            "column": 30
          },
          "imports": {
            "host_platform": "host_platform"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "platforms",
          "urls": [
            "https://github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz"
          ],
          "integrity": "sha256-IY7+juc20mo1cmY7N0olPAErcW2K8MB+hC6C8jigp+4=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "bazel_skylib@1.7.1": {
      "name": "bazel_skylib",
      "version": "1.7.1",
      "key": "bazel_skylib@1.7.1",
      "repoName": "bazel_skylib",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "//toolchains/unittest:cmd_toolchain",
        "//toolchains/unittest:bash_toolchain"
      ],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.10",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "bazel_skylib~1.7.1",
          "urls": [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz"
          ],
          "integrity": "sha256-vCg8381SalLDIBJ5zaS8KYZS76iYsQtNsIN9xRZSdW8=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rapidjson@1.1.0": {
      "name": "rapidjson",
      "version": "1.1.0",
      "key": "rapidjson@1.1.0",
      "repoName": "rapidjson",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "rules_cc": "rules_cc@0.1.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rapidjson~1.1.0",
          "urls": [
            "https://github.com/Tencent/rapidjson/archive/refs/tags/v1.1.0.zip"
          ],
          "integrity": "sha256-jgDDiCnWeFot+5UbuHxpdPoH3+SIqlsl3uxLi8D2o6s=",
          "strip_prefix": "rapidjson-1.1.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rapidjson/1.1.0/patches/add_build_file.patch": "sha256-JFk3zITx+GEl1PNvPuTInvFCtiRkXl7DHByyvhirr60=",
            "https://bcr.bazel.build/modules/rapidjson/1.1.0/patches/module_dot_bazel.patch": "sha256-B5PLMM5b+gfim+L8z/AzGcJ+aKoNZsYH1AkR2X6DTPA="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "bazel_features@1.19.0": {
      "name": "bazel_features",
      "version": "1.19.0",
      "key": "bazel_features@1.19.0",
      "repoName": "bazel_features",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_features//private:extensions.bzl",
          "extensionName": "version_extension",
          "usingModule": "bazel_features@1.19.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/bazel_features/1.19.0/MODULE.bazel",
            "line": 15,
            "column": 24
          },
          "imports": {
            "bazel_features_globals": "bazel_features_globals",
            "bazel_features_version": "bazel_features_version"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "bazel_features~1.19.0",
          "urls": [
            "https://github.com/bazel-contrib/bazel_features/releases/download/v1.19.0/bazel_features-v1.19.0.tar.gz"
          ],
          "integrity": "sha256-Nkb/1Ed1NJC3fSOA+mP01V3Zci5WXYTf2gFTa0jhg9o=",
          "strip_prefix": "bazel_features-1.19.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/bazel_features/1.19.0/patches/module_dot_bazel_version.patch": "sha256-PYPpjeCJB6UPdLGFi3WQTUZg3QcWYGizPZCv0UydI8M="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "jsoncpp@1.9.5": {
      "name": "jsoncpp",
      "version": "1.9.5",
      "key": "jsoncpp@1.9.5",
      "repoName": "jsoncpp",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "jsoncpp~1.9.5",
          "urls": [
            "https://github.com/open-source-parsers/jsoncpp/archive/refs/tags/1.9.5.tar.gz"
          ],
          "integrity": "sha256-9AmFblkgwY0ML7hSduJO5gfSoJtefV8KNxNokDwnXaI=",
          "strip_prefix": "jsoncpp-1.9.5",
          "remote_patches": {
            "https://bcr.bazel.build/modules/jsoncpp/1.9.5/patches/build_dot_bazel.patch": "sha256-Vj8diXSWps8I8h5cdEqBDYmKBA2ulvWxMZBEQlIgcpU=",
            "https://bcr.bazel.build/modules/jsoncpp/1.9.5/patches/module_dot_bazel.patch": "sha256-7RC7fS8N11vcyeDEaUZ05yBqr0YY7OzuzqaWz5W2XDo="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_java@7.1.0": {
      "name": "rules_java",
      "version": "7.1.0",
      "key": "rules_java@7.1.0",
      "repoName": "rules_java",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "//toolchains:all",
        "@local_jdk//:runtime_toolchain_definition",
        "@local_jdk//:bootstrap_runtime_toolchain_definition",
        "@remotejdk11_linux_toolchain_config_repo//:all",
        "@remotejdk11_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk11_linux_ppc64le_toolchain_config_repo//:all",
        "@remotejdk11_linux_s390x_toolchain_config_repo//:all",
        "@remotejdk11_macos_toolchain_config_repo//:all",
        "@remotejdk11_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk11_win_toolchain_config_repo//:all",
        "@remotejdk11_win_arm64_toolchain_config_repo//:all",
        "@remotejdk17_linux_toolchain_config_repo//:all",
        "@remotejdk17_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk17_linux_ppc64le_toolchain_config_repo//:all",
        "@remotejdk17_linux_s390x_toolchain_config_repo//:all",
        "@remotejdk17_macos_toolchain_config_repo//:all",
        "@remotejdk17_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk17_win_toolchain_config_repo//:all",
        "@remotejdk17_win_arm64_toolchain_config_repo//:all",
        "@remotejdk21_linux_toolchain_config_repo//:all",
        "@remotejdk21_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk21_macos_toolchain_config_repo//:all",
        "@remotejdk21_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk21_win_toolchain_config_repo//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_java//java:extensions.bzl",
          "extensionName": "toolchains",
          "usingModule": "rules_java@7.1.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_java/7.1.0/MODULE.bazel",
            "line": 19,
            "column": 27
          },
          "imports": {
            "remote_java_tools": "remote_java_tools",
            "remote_java_tools_linux": "remote_java_tools_linux",
            "remote_java_tools_windows": "remote_java_tools_windows",
            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64",
            "local_jdk": "local_jdk",
            "remotejdk11_linux_toolchain_config_repo": "remotejdk11_linux_toolchain_config_repo",
            "remotejdk11_linux_aarch64_toolchain_config_repo": "remotejdk11_linux_aarch64_toolchain_config_repo",
            "remotejdk11_linux_ppc64le_toolchain_config_repo": "remotejdk11_linux_ppc64le_toolchain_config_repo",
            "remotejdk11_linux_s390x_toolchain_config_repo": "remotejdk11_linux_s390x_toolchain_config_repo",
            "remotejdk11_macos_toolchain_config_repo": "remotejdk11_macos_toolchain_config_repo",
            "remotejdk11_macos_aarch64_toolchain_config_repo": "remotejdk11_macos_aarch64_toolchain_config_repo",
            "remotejdk11_win_toolchain_config_repo": "remotejdk11_win_toolchain_config_repo",
            "remotejdk11_win_arm64_toolchain_config_repo": "remotejdk11_win_arm64_toolchain_config_repo",
            "remotejdk17_linux_toolchain_config_repo": "remotejdk17_linux_toolchain_config_repo",
            "remotejdk17_linux_aarch64_toolchain_config_repo": "remotejdk17_linux_aarch64_toolchain_config_repo",
            "remotejdk17_linux_ppc64le_toolchain_config_repo": "remotejdk17_linux_ppc64le_toolchain_config_repo",
            "remotejdk17_linux_s390x_toolchain_config_repo": "remotejdk17_linux_s390x_toolchain_config_repo",
            "remotejdk17_macos_toolchain_config_repo": "remotejdk17_macos_toolchain_config_repo",
            "remotejdk17_macos_aarch64_toolchain_config_repo": "remotejdk17_macos_aarch64_toolchain_config_repo",
            "remotejdk17_win_toolchain_config_repo": "remotejdk17_win_toolchain_config_repo",
            "remotejdk17_win_arm64_toolchain_config_repo": "remotejdk17_win_arm64_toolchain_config_repo",
            "remotejdk21_linux_toolchain_config_repo": "remotejdk21_linux_toolchain_config_repo",
            "remotejdk21_linux_aarch64_toolchain_config_repo": "remotejdk21_linux_aarch64_toolchain_config_repo",
            "remotejdk21_macos_toolchain_config_repo": "remotejdk21_macos_toolchain_config_repo",
            "remotejdk21_macos_aarch64_toolchain_config_repo": "remotejdk21_macos_aarch64_toolchain_config_repo",
            "remotejdk21_win_toolchain_config_repo": "remotejdk21_win_toolchain_config_repo"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "platforms": "platforms@0.0.10",
        "rules_cc": "rules_cc@0.1.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_proto": "rules_proto@7.0.2",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_java~7.1.0",
          "urls": [
            "https://github.com/bazelbuild/rules_java/releases/download/7.1.0/rules_java-7.1.0.tar.gz"
          ],
          "integrity": "sha256-o3pOX2OrgnFuXdau75iO2EYcegC46TYnImKJn1h81OE=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_jvm_external@5.1": {
      "name": "rules_jvm_external",
      "version": "5.1",
      "key": "rules_jvm_external@5.1",
      "repoName": "rules_jvm_external",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_jvm_external//:non-module-deps.bzl",
          "extensionName": "non_module_deps",
          "usingModule": "rules_jvm_external@5.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_jvm_external/5.1/MODULE.bazel",
            "line": 9,
            "column": 32
          },
          "imports": {
            "io_bazel_rules_kotlin": "io_bazel_rules_kotlin"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": ":extensions.bzl",
          "extensionName": "maven",
          "usingModule": "rules_jvm_external@5.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_jvm_external/5.1/MODULE.bazel",
            "line": 16,
            "column": 22
          },
          "imports": {
            "rules_jvm_external_deps": "rules_jvm_external_deps"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "install",
              "attributeValues": {
                "name": "rules_jvm_external_deps",
                "artifacts": [
                  "com.google.auth:google-auth-library-credentials:0.22.0",
                  "com.google.auth:google-auth-library-oauth2-http:0.22.0",
                  "com.google.cloud:google-cloud-core:1.93.10",
                  "com.google.cloud:google-cloud-storage:1.113.4",
                  "com.google.code.gson:gson:2.9.0",
                  "com.google.googlejavaformat:google-java-format:1.15.0",
                  "com.google.guava:guava:31.1-jre",
                  "org.apache.maven:maven-artifact:3.8.6",
                  "software.amazon.awssdk:s3:2.17.183"
                ],
                "lock_file": "@rules_jvm_external//:rules_jvm_external_deps_install.json"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/5.1/MODULE.bazel",
                "line": 18,
                "column": 14
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "io_bazel_stardoc": "stardoc@0.5.3",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_jvm_external~5.1",
          "urls": [
            "https://github.com/bazelbuild/rules_jvm_external/releases/download/5.1/rules_jvm_external-5.1.tar.gz"
          ],
          "integrity": "sha256-jDsgdyLl+X8cgzEVgqbBHfmSJuZeJHEIbillYeV8yVQ=",
          "strip_prefix": "rules_jvm_external-5.1",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_pkg@0.7.0": {
      "name": "rules_pkg",
      "version": "0.7.0",
      "key": "rules_pkg@0.7.0",
      "repoName": "rules_pkg",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "rules_python": "rules_python@0.33.2",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_pkg~0.7.0",
          "urls": [
            "https://github.com/bazelbuild/rules_pkg/releases/download/0.7.0/rules_pkg-0.7.0.tar.gz"
          ],
          "integrity": "sha256-iimOgydi7aGDBZfWT+fbWBeKqEzVkm121bdE1lWJQcI=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_pkg/0.7.0/patches/module_dot_bazel.patch": "sha256-4OaEPZwYF6iC71ZTDg6MJ7LLqX7ZA0/kK4mT+4xKqiE="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "zlib@1.3": {
      "name": "zlib",
      "version": "1.3",
      "key": "zlib@1.3",
      "repoName": "zlib",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.10",
        "rules_cc": "rules_cc@0.1.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "zlib~1.3",
          "urls": [
            "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"
          ],
          "integrity": "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4=",
          "strip_prefix": "zlib-1.3",
          "remote_patches": {
            "https://bcr.bazel.build/modules/zlib/1.3/patches/add_build_file.patch": "sha256-Ei+FYaaOo7A3jTKunMEodTI0Uw5NXQyZEcboMC8JskY=",
            "https://bcr.bazel.build/modules/zlib/1.3/patches/module_dot_bazel.patch": "sha256-fPWLM+2xaF/kuy+kZc1YTfW6hNjrkG400Ho7gckuyJk="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "re2@2024-07-02": {
      "name": "re2",
      "version": "2024-07-02",
      "key": "re2@2024-07-02",
      "repoName": "re2",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_tools//tools/cpp:cc_configure.bzl",
          "extensionName": "cc_configure_extension",
          "usingModule": "re2@2024-07-02",
          "location": {
            "file": "https://bcr.bazel.build/modules/re2/2024-07-02/MODULE.bazel",
            "line": 22,
            "column": 29
          },
          "imports": {
            "local_config_cc": "local_config_cc"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "platforms": "platforms@0.0.10",
        "apple_support": "apple_support@1.15.1",
        "rules_cc": "rules_cc@0.1.0",
        "abseil-cpp": "abseil-cpp@20240116.2",
        "rules_python": "rules_python@0.33.2",
        "pybind11_bazel": "pybind11_bazel@2.12.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "re2~2024-07-02",
          "urls": [
            "https://github.com/google/re2/releases/download/2024-07-02/re2-2024-07-02.zip"
          ],
          "integrity": "sha256-qDX+Vfvc2OgPOFhKsi0IQGYsZ/L+s2vWeUAtqWQdxx4=",
          "strip_prefix": "re2-2024-07-02",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "gflags@2.2.2": {
      "name": "gflags",
      "version": "2.2.2",
      "key": "gflags@2.2.2",
      "repoName": "gflags",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "gflags~2.2.2",
          "urls": [
            "https://github.com/gflags/gflags/archive/refs/tags/v2.2.2.tar.gz"
          ],
          "integrity": "sha256-NK8vFc9zZ1E7NSvc0kk6sUzkNpLS3NnfxJlJKWbGTc8=",
          "strip_prefix": "gflags-2.2.2",
          "remote_patches": {
            "https://bcr.bazel.build/modules/gflags/2.2.2/patches/module_dot_bazel.patch": "sha256-BVSk+8ijV+s6djcokSgSZGlP153Q+rvF2h9W/AG53Zo="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "apple_support@1.15.1": {
      "name": "apple_support",
      "version": "1.15.1",
      "key": "apple_support@1.15.1",
      "repoName": "build_bazel_apple_support",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_apple_cc_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@build_bazel_apple_support//crosstool:setup.bzl",
          "extensionName": "apple_cc_configure_extension",
          "usingModule": "apple_support@1.15.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/apple_support/1.15.1/MODULE.bazel",
            "line": 19,
            "column": 35
          },
          "imports": {
            "local_config_apple_cc": "local_config_apple_cc",
            "local_config_apple_cc_toolchains": "local_config_apple_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.10",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "apple_support~1.15.1",
          "urls": [
            "https://github.com/bazelbuild/apple_support/releases/download/1.15.1/apple_support.1.15.1.tar.gz"
          ],
          "integrity": "sha256-xLsrc2fEhDgjAK7nW+WYuS+EeJb7MbvSLzojRq32aoA=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/apple_support/1.15.1/patches/module_dot_bazel_version.patch": "sha256-FvMGp1f0FT1IT38LFbWGUqe5fukTvEyug2Puhimca74="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "stardoc@0.5.3": {
      "name": "stardoc",
      "version": "0.5.3",
      "key": "stardoc@0.5.3",
      "repoName": "stardoc",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_java": "rules_java@7.1.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "stardoc~0.5.3",
          "urls": [
            "https://github.com/bazelbuild/stardoc/releases/download/0.5.3/stardoc-0.5.3.tar.gz"
          ],
          "integrity": "sha256-P9j+xN3sPGcL2BCQTi4zFwvt/hL5Ct+UNQgYS+RYyLs=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/stardoc/0.5.3/patches/module_dot_bazel.patch": "sha256-Lgpy9OCr0zBWYuHoyM1rJJrgxn23X/bwgICEF7XiEug="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "pybind11_bazel@2.12.0": {
      "name": "pybind11_bazel",
      "version": "2.12.0",
      "key": "pybind11_bazel@2.12.0",
      "repoName": "pybind11_bazel",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@pybind11_bazel//:internal_configure.bzl",
          "extensionName": "internal_configure_extension",
          "usingModule": "pybind11_bazel@2.12.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/pybind11_bazel/2.12.0/MODULE.bazel",
            "line": 12,
            "column": 35
          },
          "imports": {
            "pybind11": "pybind11"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.10",
        "rules_cc": "rules_cc@0.1.0",
        "rules_python": "rules_python@0.33.2",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "pybind11_bazel~2.12.0",
          "urls": [
            "https://github.com/pybind/pybind11_bazel/releases/download/v2.12.0/pybind11_bazel-2.12.0.zip"
          ],
          "integrity": "sha256-pYwlxf4GOnAFf6IMuOFfO9oZsQMDBby1M68eRfNqSlU=",
          "strip_prefix": "pybind11_bazel-2.12.0",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    }
  },
  "moduleExtensions": {
    "@@apple_support~1.15.1//crosstool:setup.bzl%apple_cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "RyR+EbN4fAzxxZSQKwXXrxEtMVrezn79MOR/2mmcmYk=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_apple_cc": {
            "bzlFile": "@@apple_support~1.15.1//crosstool:setup.bzl",
            "ruleClassName": "_apple_cc_autoconf",
            "attributes": {
              "name": "apple_support~1.15.1~apple_cc_configure_extension~local_config_apple_cc"
            }
          },
          "local_config_apple_cc_toolchains": {
            "bzlFile": "@@apple_support~1.15.1//crosstool:setup.bzl",
            "ruleClassName": "_apple_cc_autoconf_toolchains",
            "attributes": {
              "name": "apple_support~1.15.1~apple_cc_configure_extension~local_config_apple_cc_toolchains"
            }
          }
        }
      }
    },
    "@@bazel_features~1.19.0//private:extensions.bzl%version_extension": {
      "general": {
        "bzlTransitiveDigest": "/vJOb4IBPnuxjLO8/iEqHTGFZi8aA7E5PheUA6nMtMk=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "bazel_features_version": {
            "bzlFile": "@@bazel_features~1.19.0//private:version_repo.bzl",
            "ruleClassName": "version_repo",
            "attributes": {
              "name": "bazel_features~1.19.0~version_extension~bazel_features_version"
            }
          },
          "bazel_features_globals": {
            "bzlFile": "@@bazel_features~1.19.0//private:globals_repo.bzl",
            "ruleClassName": "globals_repo",
            "attributes": {
              "name": "bazel_features~1.19.0~version_extension~bazel_features_globals",
              "globals": {
                "CcSharedLibraryInfo": "6.0.0-pre.20220630.1",
                "CcSharedLibraryHintInfo": "7.0.0-pre.20230316.2",
                "PackageSpecificationInfo": "6.4.0",
                "RunEnvironmentInfo": "5.3.0",
                "DefaultInfo": "0.0.1",
                "__TestingOnly_NeverAvailable": "1000000000.0.0"
              },
              "legacy_globals": {
                "JavaInfo": "8.0.0",
                "JavaPluginInfo": "8.0.0",
                "ProtoInfo": "8.0.0",
                "PyCcLinkParamsProvider": "8.0.0",
                "PyInfo": "8.0.0",
                "PyRuntimeInfo": "8.0.0"
              }
            }
          }
        },
        "moduleExtensionMetadata": {
          "useAllRepos": "DEV"
        }
      }
    },
    "@@bazel_tools//tools/cpp:cc_configure.bzl%cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "O9sf6ilKWU9Veed02jG9o2HM/xgV/UAyciuFBuxrFRY=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_cc": {
            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
            "ruleClassName": "cc_autoconf",
            "attributes": {
              "name": "bazel_tools~cc_configure_extension~local_config_cc"
            }
          },
          "local_config_cc_toolchains": {
            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
            "ruleClassName": "cc_autoconf_toolchains",
            "attributes": {
              "name": "bazel_tools~cc_configure_extension~local_config_cc_toolchains"
            }
          }
        }
      }
    },
    "@@bazel_tools//tools/osx:xcode_configure.bzl%xcode_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "Qh2bWTU6QW6wkrd87qrU4YeY+SG37Nvw3A0PR4Y0L2Y=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_xcode": {
            "bzlFile": "@@bazel_tools//tools/osx:xcode_configure.bzl",
            "ruleClassName": "xcode_autoconf",
            "attributes": {
              "name": "bazel_tools~xcode_configure_extension~local_config_xcode",
              "xcode_locator": "@bazel_tools//tools/osx:xcode_locator.m",
              "remote_xcode": ""
            }
          }
        }
      }
    },
    "@@bazel_tools//tools/sh:sh_configure.bzl%sh_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "hp4NgmNjEg5+xgvzfh6L83bt9/aiiWETuNpwNuF1MSU=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_sh": {
            "bzlFile": "@@bazel_tools//tools/sh:sh_configure.bzl",
            "ruleClassName": "sh_config",
            "attributes": {
              "name": "bazel_tools~sh_configure_extension~local_config_sh"
            }
          }
        }
      }
    },
    "@@rules_cc~0.1.0//cc:extensions.bzl%cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "yxBL7MHhGRJITje64yhhUqZLeAPjfDsWTOTiAa2DBsw=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_cc": {
            "bzlFile": "@@rules_cc~0.1.0//cc/private/toolchain:cc_configure.bzl",
            "ruleClassName": "cc_autoconf",
            "attributes": {
              "name": "rules_cc~0.1.0~cc_configure_extension~local_config_cc"
            }
          },
          "local_config_cc_toolchains": {
            "bzlFile": "@@rules_cc~0.1.0//cc/private/toolchain:cc_configure.bzl",
            "ruleClassName": "cc_autoconf_toolchains",
            "attributes": {
              "name": "rules_cc~0.1.0~cc_configure_extension~local_config_cc_toolchains"
            }
          }
        }
      }
    },
    "@@rules_java~7.1.0//java:extensions.bzl%toolchains": {
      "general": {
        "bzlTransitiveDigest": "iUIRqCK7tkhvcDJCAfPPqSd06IHG0a8HQD0xeQyVAqw=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "remotejdk21_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_s390x_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_s390x_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk21_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk21_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "2a7a99a3ea263dbd8d32a67d1e6e363ba8b25c645c826f5e167a02bbafaff1fa",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-macosx_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk17_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "314b04568ec0ae9b36ba03c9cbd42adc9e1265f74678923b19297d66eb84dcca",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remote_java_tools_windows": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_windows",
              "sha256": "c5c70c214a350f12cbf52da8270fa43ba629b795f3dd328028a38f8f0d39c2a1",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_windows-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_windows-v13.1.zip"
              ]
            }
          },
          "remotejdk11_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "43408193ce2fa0862819495b5ae8541085b95660153f2adcf91a52d3a1710e83",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-win_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip"
              ]
            }
          },
          "remotejdk11_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "54174439f2b3fddd11f1048c397fe7bb45d4c9d66d452d6889b013d04d21c4de",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-linux_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk17_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "b9482f2304a1a68a614dfacddcf29569a72f0fac32e6c74f83dc1b9a157b8340",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-linux_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_s390x_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_s390x_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk11_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "bcaab11cfe586fae7583c6d9d311c64384354fb2638eb9a012eca4c3f1a1d9fd",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-macosx_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_win_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_arm64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "b8a28e6e767d90acf793ea6f5bed0bb595ba0ba5ebdf8b99f395266161e53ec2",
              "strip_prefix": "jdk-11.0.13+8",
              "urls": [
                "https://mirror.bazel.build/aka.ms/download-jdk/microsoft-jdk-11.0.13.8.1-windows-aarch64.zip"
              ]
            }
          },
          "remotejdk17_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "640453e8afe8ffe0fb4dceb4535fb50db9c283c64665eebb0ba68b19e65f4b1f",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-macosx_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk21_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "9639b87db586d0c89f7a9892ae47f421e442c64b97baebdff31788fbe23265bd",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-macosx_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk21_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk17_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "192f2afca57701de6ec496234f7e45d971bf623ff66b8ee4a5c81582054e5637",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-win_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip"
              ]
            }
          },
          "remotejdk11_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_ppc64le_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_ppc64le_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\n"
            }
          },
          "remotejdk21_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "0c0eadfbdc47a7ca64aeab51b9c061f71b6e4d25d2d87674512e9b6387e9e3a6",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-linux_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_x64.tar.gz"
              ]
            }
          },
          "remote_java_tools_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_linux",
              "sha256": "d134da9b04c9023fb6e56a5d4bffccee73f7bc9572ddc4e747778dacccd7a5a7",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_linux-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_linux-v13.1.zip"
              ]
            }
          },
          "remotejdk21_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_win",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "e9959d500a0d9a7694ac243baf657761479da132f0f94720cbffd092150bd802",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-win_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-win_x64.zip",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-win_x64.zip"
              ]
            }
          },
          "remotejdk21_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "1fb64b8036c5d463d8ab59af06bf5b6b006811e6012e3b0eb6bccf57f1c55835",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-linux_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_s390x": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_s390x",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a58fc0361966af0a5d5a31a2d8a208e3c9bb0f54f345596fd80b99ea9a39788b",
              "strip_prefix": "jdk-11.0.15+10",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz",
                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz"
              ]
            }
          },
          "remotejdk17_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "6531cef61e416d5a7b691555c8cf2bdff689201b8a001ff45ab6740062b44313",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk17_win_arm64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_arm64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a34b404f87a08a61148b38e1416d837189e1df7a040d949e743633daf4695a3c",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-linux_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_ppc64le_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_ppc64le_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\n"
            }
          },
          "remotejdk17_win_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_arm64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "6802c99eae0d788e21f52d03cab2e2b3bf42bc334ca03cbf19f71eb70ee19f85",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-win_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip"
              ]
            }
          },
          "remote_java_tools_darwin_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_darwin_arm64",
              "sha256": "dab5bb87ec43e980faea6e1cec14bafb217b8e2f5346f53aa784fd715929a930",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_darwin_arm64-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_darwin_arm64-v13.1.zip"
              ]
            }
          },
          "remotejdk17_linux_ppc64le": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_ppc64le",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "00a4c07603d0218cd678461b5b3b7e25b3253102da4022d31fc35907f21a2efd",
              "strip_prefix": "jdk-17.0.8.1+1",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz",
                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz"
              ]
            }
          },
          "remotejdk21_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_win_arm64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_arm64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\n"
            }
          },
          "local_jdk": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:local_java_repository.bzl",
            "ruleClassName": "_local_java_repository_rule",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~local_jdk",
              "java_home": "",
              "version": "",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = {RUNTIME_VERSION},\n)\n"
            }
          },
          "remote_java_tools_darwin_x86_64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_darwin_x86_64",
              "sha256": "0db40d8505a2b65ef0ed46e4256757807db8162f7acff16225be57c1d5726dbc",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_darwin_x86_64-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_darwin_x86_64-v13.1.zip"
              ]
            }
          },
          "remote_java_tools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools",
              "sha256": "286bdbbd66e616fc4ed3f90101418729a73baa7e8c23a98ffbef558f74c0ad14",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools-v13.1.zip"
              ]
            }
          },
          "remotejdk17_linux_s390x": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_s390x",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "ffacba69c6843d7ca70d572489d6cc7ab7ae52c60f0852cedf4cf0d248b6fc37",
              "strip_prefix": "jdk-17.0.8.1+1",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz",
                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz"
              ]
            }
          },
          "remotejdk17_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_ppc64le": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_ppc64le",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a8fba686f6eb8ae1d1a9566821dbd5a85a1108b96ad857fdbac5c1e4649fc56f",
              "strip_prefix": "jdk-11.0.15+10",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz",
                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz"
              ]
            }
          },
          "remotejdk11_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "7632bc29f8a4b7d492b93f3bc75a7b61630894db85d136456035ab2a24d38885",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-macosx_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk21_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win//:jdk\",\n)\n"
            }
          }
        }
      }
    },
    "@@rules_python~0.33.2//python/extensions:python.bzl%python": {
      "general": {
        "bzlTransitiveDigest": "2yCkhoxFQywJhF/ZomV8mXnIw1ZbmZCYzdNvXLKVQdk=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "python_3_11_s390x-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~0.33.2//python:repositories.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~0.33.2~python~python_3_11_s390x-unknown-linux-gnu",
              "sha256": "3f7a0dd64fa292977c4da09e865ee504a48e55dbc2dbfd9ff4b991af891e4446",
              "patches": [],
              "platform": "s390x-unknown-linux-gnu",
              "python_version": "3.11.9",
              "release_filename": "20240415/cpython-3.11.9+20240415-s390x-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9+20240415-s390x-unknown-linux-gnu-install_only.tar.gz"
              ],
              "distutils_content": "",
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11_host": {
            "bzlFile": "@@rules_python~0.33.2//python/private:toolchains_repo.bzl",
            "ruleClassName": "host_toolchain",
            "attributes": {
              "name": "rules_python~0.33.2~python~python_3_11_host",
              "python_version": "3.11.9",
              "user_repository_name": "python_3_11",
              "platforms": [
                "aarch64-apple-darwin",
                "aarch64-unknown-linux-gnu",
                "ppc64le-unknown-linux-gnu",
                "s390x-unknown-linux-gnu",
                "x86_64-apple-darwin",
                "x86_64-pc-windows-msvc",
                "x86_64-unknown-linux-gnu"
              ]
            }
          },
          "python_3_11": {
            "bzlFile": "@@rules_python~0.33.2//python/private:toolchains_repo.bzl",
            "ruleClassName": "toolchain_aliases",
            "attributes": {
              "name": "rules_python~0.33.2~python~python_3_11",
              "python_version": "3.11.9",
              "user_repository_name": "python_3_11",
              "platforms": [
                "aarch64-apple-darwin",
                "aarch64-unknown-linux-gnu",
                "ppc64le-unknown-linux-gnu",
                "s390x-unknown-linux-gnu",
                "x86_64-apple-darwin",
                "x86_64-pc-windows-msvc",
                "x86_64-unknown-linux-gnu"
              ]
            }
          },
          "python_3_11_aarch64-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~0.33.2//python:repositories.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~0.33.2~python~python_3_11_aarch64-unknown-linux-gnu",
              "sha256": "b3a7199ac2615d75fb906e5ba556432efcf24baf8651fc70370d9f052d4069ee",
              "patches": [],
              "platform": "aarch64-unknown-linux-gnu",
              "python_version": "3.11.9",
              "release_filename": "20240415/cpython-3.11.9+20240415-aarch64-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9+20240415-aarch64-unknown-linux-gnu-install_only.tar.gz"
              ],
              "distutils_content": "",
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11_aarch64-apple-darwin": {
            "bzlFile": "@@rules_python~0.33.2//python:repositories.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~0.33.2~python~python_3_11_aarch64-apple-darwin",
              "sha256": "7af7058f7c268b4d87ed7e08c2c7844ef8460863b3e679db3afdce8bb1eedfae",
              "patches": [],
              "platform": "aarch64-apple-darwin",
              "python_version": "3.11.9",
              "release_filename": "20240415/cpython-3.11.9+20240415-aarch64-apple-darwin-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9+20240415-aarch64-apple-darwin-install_only.tar.gz"
              ],
              "distutils_content": "",
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11_ppc64le-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~0.33.2//python:repositories.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~0.33.2~python~python_3_11_ppc64le-unknown-linux-gnu",
              "sha256": "03f62d1e2d400c9662cdd12ae33a6f328c34ae8e2b872f8563a144834742bd6a",
              "patches": [],
              "platform": "ppc64le-unknown-linux-gnu",
              "python_version": "3.11.9",
              "release_filename": "20240415/cpython-3.11.9+20240415-ppc64le-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9+20240415-ppc64le-unknown-linux-gnu-install_only.tar.gz"
              ],
              "distutils_content": "",
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11_x86_64-apple-darwin": {
            "bzlFile": "@@rules_python~0.33.2//python:repositories.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~0.33.2~python~python_3_11_x86_64-apple-darwin",
              "sha256": "9afd734f63a23783cf0257bef25c9231ffc80e7747486dc54cf72f325213fd15",
              "patches": [],
              "platform": "x86_64-apple-darwin",
              "python_version": "3.11.9",
              "release_filename": "20240415/cpython-3.11.9+20240415-x86_64-apple-darwin-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9+20240415-x86_64-apple-darwin-install_only.tar.gz"
              ],
              "distutils_content": "",
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "pythons_hub": {
            "bzlFile": "@@rules_python~0.33.2//python/private/bzlmod:pythons_hub.bzl",
            "ruleClassName": "hub_repo",
            "attributes": {
              "name": "rules_python~0.33.2~python~pythons_hub",
              "default_python_version": "3.11",
              "toolchain_prefixes": [
                "_0000_python_3_11_"
              ],
              "toolchain_python_versions": [
                "3.11"
              ],
              "toolchain_set_python_version_constraints": [
                "False"
              ],
              "toolchain_user_repository_names": [
                "python_3_11"
              ]
            }
          },
          "python_versions": {
            "bzlFile": "@@rules_python~0.33.2//python/private:toolchains_repo.bzl",
            "ruleClassName": "multi_toolchain_aliases",
            "attributes": {
              "name": "rules_python~0.33.2~python~python_versions",
              "python_versions": {
                "3.11": "python_3_11"
              }
            }
          },
          "python_3_11_x86_64-pc-windows-msvc": {
            "bzlFile": "@@rules_python~0.33.2//python:repositories.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~0.33.2~python~python_3_11_x86_64-pc-windows-msvc",
              "sha256": "368474c69f476e7de4adaf50b61d9fcf6ec8b4db88cc43c5f71c860b3cd29c69",
              "patches": [],
              "platform": "x86_64-pc-windows-msvc",
              "python_version": "3.11.9",
              "release_filename": "20240415/cpython-3.11.9+20240415-x86_64-pc-windows-msvc-shared-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9+20240415-x86_64-pc-windows-msvc-shared-install_only.tar.gz"
              ],
              "distutils_content": "",
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          },
          "python_3_11_x86_64-unknown-linux-gnu": {
            "bzlFile": "@@rules_python~0.33.2//python:repositories.bzl",
            "ruleClassName": "python_repository",
            "attributes": {
              "name": "rules_python~0.33.2~python~python_3_11_x86_64-unknown-linux-gnu",
              "sha256": "78b1c16a9fd032997ba92a60f46a64f795cd18ff335659dfdf6096df277b24d5",
              "patches": [],
              "platform": "x86_64-unknown-linux-gnu",
              "python_version": "3.11.9",
              "release_filename": "20240415/cpython-3.11.9+20240415-x86_64-unknown-linux-gnu-install_only.tar.gz",
              "urls": [
                "https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9+20240415-x86_64-unknown-linux-gnu-install_only.tar.gz"
              ],
              "distutils_content": "",
              "strip_prefix": "python",
              "coverage_tool": "",
              "ignore_root_user_error": false
            }
          }
        }
      }
    },
    "@@rules_python~0.33.2//python/private/bzlmod:internal_deps.bzl%internal_deps": {
      "general": {
        "bzlTransitiveDigest": "FRwqSbc8lJfoyffS6rQ/A7/T50hhWugS8E6dHrCt6ZY=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "pypi__wheel": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__wheel",
              "url": "https://files.pythonhosted.org/packages/7d/cd/d7460c9a869b16c3dd4e1e403cce337df165368c71d6af229a74699622ce/wheel-0.43.0-py3-none-any.whl",
              "sha256": "55c570405f142630c6b9f72fe09d9b67cf1477fcf543ae5b8dcb1f5b7377da81",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__click": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__click",
              "url": "https://files.pythonhosted.org/packages/00/2e/d53fa4befbf2cfa713304affc7ca780ce4fc1fd8710527771b58311a3229/click-8.1.7-py3-none-any.whl",
              "sha256": "ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__importlib_metadata": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__importlib_metadata",
              "url": "https://files.pythonhosted.org/packages/2d/0a/679461c511447ffaf176567d5c496d1de27cbe34a87df6677d7171b2fbd4/importlib_metadata-7.1.0-py3-none-any.whl",
              "sha256": "30962b96c0c223483ed6cc7280e7f0199feb01a0e40cfae4d4450fc6fab1f570",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__pyproject_hooks": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__pyproject_hooks",
              "url": "https://files.pythonhosted.org/packages/ae/f3/431b9d5fe7d14af7a32340792ef43b8a714e7726f1d7b69cc4e8e7a3f1d7/pyproject_hooks-1.1.0-py3-none-any.whl",
              "sha256": "7ceeefe9aec63a1064c18d939bdc3adf2d8aa1988a510afec15151578b232aa2",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__pep517": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__pep517",
              "url": "https://files.pythonhosted.org/packages/25/6e/ca4a5434eb0e502210f591b97537d322546e4833dcb4d470a48c375c5540/pep517-0.13.1-py3-none-any.whl",
              "sha256": "31b206f67165b3536dd577c5c3f1518e8fbaf38cbc57efff8369a392feff1721",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__packaging": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__packaging",
              "url": "https://files.pythonhosted.org/packages/49/df/1fceb2f8900f8639e278b056416d49134fb8d84c5942ffaa01ad34782422/packaging-24.0-py3-none-any.whl",
              "sha256": "2ddfb553fdf02fb784c234c7ba6ccc288296ceabec964ad2eae3777778130bc5",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__pip_tools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__pip_tools",
              "url": "https://files.pythonhosted.org/packages/0d/dc/38f4ce065e92c66f058ea7a368a9c5de4e702272b479c0992059f7693941/pip_tools-7.4.1-py3-none-any.whl",
              "sha256": "4c690e5fbae2f21e87843e89c26191f0d9454f362d8acdbd695716493ec8b3a9",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__setuptools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__setuptools",
              "url": "https://files.pythonhosted.org/packages/de/88/70c5767a0e43eb4451c2200f07d042a4bcd7639276003a9c54a68cfcc1f8/setuptools-70.0.0-py3-none-any.whl",
              "sha256": "54faa7f2e8d2d11bcd2c07bed282eef1046b5c080d1c32add737d7b5817b1ad4",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__zipp": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__zipp",
              "url": "https://files.pythonhosted.org/packages/da/55/a03fd7240714916507e1fcf7ae355bd9d9ed2e6db492595f1a67f61681be/zipp-3.18.2-py3-none-any.whl",
              "sha256": "dce197b859eb796242b0622af1b8beb0a722d52aa2f57133ead08edd5bf5374e",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__colorama": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__colorama",
              "url": "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl",
              "sha256": "4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__build": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__build",
              "url": "https://files.pythonhosted.org/packages/e2/03/f3c8ba0a6b6e30d7d18c40faab90807c9bb5e9a1e3b2fe2008af624a9c97/build-1.2.1-py3-none-any.whl",
              "sha256": "75e10f767a433d9a86e50d83f418e83efc18ede923ee5ff7df93b6cb0306c5d4",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "rules_python_internal": {
            "bzlFile": "@@rules_python~0.33.2//python/private:internal_config_repo.bzl",
            "ruleClassName": "internal_config_repo",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~rules_python_internal"
            }
          },
          "pypi__pip": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__pip",
              "url": "https://files.pythonhosted.org/packages/8a/6a/19e9fe04fca059ccf770861c7d5721ab4c2aebc539889e97c7977528a53b/pip-24.0-py3-none-any.whl",
              "sha256": "ba0d021a166865d2265246961bec0152ff124de910c5cc39f1156ce3fa7c69dc",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__installer": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__installer",
              "url": "https://files.pythonhosted.org/packages/e5/ca/1172b6638d52f2d6caa2dd262ec4c811ba59eee96d54a7701930726bce18/installer-0.7.0-py3-none-any.whl",
              "sha256": "05d1933f0a5ba7d8d6296bb6d5018e7c94fa473ceb10cf198a92ccea19c27b53",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__more_itertools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__more_itertools",
              "url": "https://files.pythonhosted.org/packages/50/e2/8e10e465ee3987bb7c9ab69efb91d867d93959095f4807db102d07995d94/more_itertools-10.2.0-py3-none-any.whl",
              "sha256": "686b06abe565edfab151cb8fd385a05651e1fdf8f0a14191e4439283421f8684",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          },
          "pypi__tomli": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_python~0.33.2~internal_deps~pypi__tomli",
              "url": "https://files.pythonhosted.org/packages/97/75/10a9ebee3fd790d20926a90a2547f0bf78f371b2f13aa822c759680ca7b9/tomli-2.0.1-py3-none-any.whl",
              "sha256": "939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc",
              "type": "zip",
              "build_file_content": "package(default_visibility = [\"//visibility:public\"])\n\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\n\npy_library(\n    name = \"lib\",\n    srcs = glob([\"**/*.py\"]),\n    data = glob([\"**/*\"], exclude=[\n        # These entries include those put into user-installed dependencies by\n        # data_exclude in /python/pip_install/tools/bazel.py\n        # to avoid non-determinism following pip install's behavior.\n        \"**/*.py\",\n        \"**/*.pyc\",\n        \"**/*.pyc.*\",  # During pyc creation, temp files named *.pyc.NNN are created\n        \"**/* *\",\n        \"**/*.dist-info/RECORD\",\n        \"BUILD\",\n        \"WORKSPACE\",\n    ]),\n    # This makes this directory a top-level in the python import\n    # search path for anything that depends on this.\n    imports = [\".\"],\n)\n"
            }
          }
        },
        "moduleExtensionMetadata": {
          "useAllRepos": "DEV"
        }
      }
    }
  }
}
